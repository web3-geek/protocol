import resolve from '@rollup/plugin-node-resolve';
import commonjs from '@rollup/plugin-commonjs';
import { createFilter } from '@rollup/pluginutils';
import { parse } from '@babel/parser';
import { default as _generate } from '@babel/generator';
import t from '@babel/types';
import _traverse from '@babel/traverse';
const traverse = _traverse.default;
const generate = _generate.default;
export default {
  input: {
    // 'google-protobuf': 'src/index.js',
    // 'any_pb': 'src/any_pb.js',
    'smart_contract_pb': 'src/core/contract/smart_contract_pb.js'
  },
  output: {
    entryFileNames: '[name].ts',
    chunkFileNames: '[name]-[hash].ts',
    dir: 'build',
    format: 'es',
    banner: "/* Generated by rollup. Don't edit it. */\n // @ts-nocheck"
  },
  plugins: [transformRequirePlugin({ include: 'src/core/**/*' }), resolve(), commonjs()]
};

function transformRequirePlugin(options = {}) {
  const filter = createFilter(options.include, options.exclude);
  return {
    name: 'transform-code',
    transform(code, id) {
      if (!filter(id)) return;
      const ast = parse(code, {
        sourceType: 'module'
      });
      traverse(ast, {
        VariableDeclaration: function (path) {
          const cur = path;
          if (path.parent.type !== 'Program' || !path.node.declarations || !path.node.declarations[0]) {
            return;
          }
          const declarator = path.node.declarations[0];
          if (!t.isCallExpression(declarator.init) || declarator.init.callee?.name !== 'require') {
            return;
          }
          const argument = declarator.init.arguments[0];
          if (!argument) {
            return;
          }
          const name = declarator.id.name;
          const lib = argument.value;
          if (lib.startsWith('google-protobuf')) {
            cur.replaceWith(
              t.importDeclaration([t.importNamespaceSpecifier(t.identifier(name))], t.stringLiteral('@tronweb3/' + lib))
            );
          }
          if (name === 'core_Tron_pb') {
            cur.replaceWith(
              t.importDeclaration([t.importNamespaceSpecifier(t.identifier(name))], t.stringLiteral(lib))
            );
          }
        },
        Program(path) {
          path.pushContainer(
            'body',
            t.exportDefaultDeclaration(t.memberExpression(t.identifier('proto'), t.identifier('protocol')))
          );
        }
      });
      const output = generate(
        ast,
        {
          /* options */
        },
        code
      );
      // proceed with the transformation...
      return {
        code: output.code,
        map: output.map
      };
    }
  };
}
